{
  "address": "0x5131a4215EF0840053cbf0eA4C99952319B9726f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_underlyingToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "ERC20CallFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IllegalState",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlyingToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "unwrap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "wrap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xffaeea4906b54d1437a09f902091da381bfb7536a34cc29b77a36edebe8e3324",
  "receipt": {
    "to": null,
    "from": "0x802D0b042fB02681F042234775CE939aAC0F8254",
    "contractAddress": "0x5131a4215EF0840053cbf0eA4C99952319B9726f",
    "transactionIndex": 0,
    "gasUsed": "616724",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x42f237d9218089d44417eb91f325c255baac295fd8173be79cb48b7bea8be2e7",
    "transactionHash": "0xffaeea4906b54d1437a09f902091da381bfb7536a34cc29b77a36edebe8e3324",
    "logs": [],
    "blockNumber": 91763075,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xFc5FA288c9A409Fd7BF5B5b858e09F1cAcEB7d68",
    "0x8e29E74C488C43B591d0b9c2BcEFD446A393A49a"
  ],
  "solcInputHash": "dac29ad941abae12286cde9e19022bbf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlyingToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ERC20CallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalState\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"unwrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"wrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Alchemix Finance\",\"errors\":{\"ERC20CallFailed(address,bool,bytes)\":[{\"params\":{\"data\":\"The resulting data from the call. This is error data when the call was not a success. Otherwise,                this is malformed data when the call was a success.\",\"success\":\"If the call to the token was a success.\",\"target\":\"The target address.\"}}]},\"kind\":\"dev\",\"methods\":{\"price()\":{\"returns\":{\"_0\":\"The price.\"}},\"unwrap(uint256,address)\":{\"params\":{\"amount\":\"The amount of yield-tokens to redeem.\",\"recipient\":\"The recipient of the resulting underlying-tokens.\"},\"returns\":{\"_0\":\"The amount of underlying tokens unwrapped to `recipient`.\"}},\"wrap(uint256,address)\":{\"params\":{\"amount\":\"The amount of the underlying token to wrap.\",\"recipient\":\"The address which will receive the yield tokens.\"},\"returns\":{\"_0\":\"The amount of yield tokens minted to `recipient`.\"}}},\"stateVariables\":{\"token\":{\"return\":\"The address of the yield token.\",\"returns\":{\"_0\":\"The address of the yield token.\"}},\"underlyingToken\":{\"return\":\"The address of the underlying token.\",\"returns\":{\"_0\":\"The address of the underlying token.\"}},\"version\":{\"return\":\"The version.\",\"returns\":{\"_0\":\"The version.\"}}},\"title\":\"CTokenAdapter\",\"version\":1},\"userdoc\":{\"errors\":{\"ERC20CallFailed(address,bool,bytes)\":[{\"notice\":\"An error used to indicate that a call to an ERC20 contract failed.\"}],\"IllegalState()\":[{\"notice\":\"An error used to indicate that an action could not be completed because the contract either already existed         or entered an illegal condition which is not recoverable from.\"}]},\"kind\":\"user\",\"methods\":{\"price()\":{\"notice\":\"Gets the number of underlying tokens that a single whole yield token is redeemable for.\"},\"token()\":{\"notice\":\"Gets the address of the yield token that this adapter supports.\"},\"underlyingToken()\":{\"notice\":\"Gets the address of the underlying token that the yield token wraps.\"},\"unwrap(uint256,address)\":{\"notice\":\"Unwraps `amount` yield tokens into the underlying token.\"},\"version()\":{\"notice\":\"Gets the current version.\"},\"wrap(uint256,address)\":{\"notice\":\"Wraps `amount` underlying tokens into the yield token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/adapters/bastion/CTokenAdapter.sol\":\"CTokenAdapter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/adapters/bastion/CTokenAdapter.sol\":{\"content\":\"pragma solidity ^0.8.11;\\n\\nimport \\\"../../libraries/TokenUtils.sol\\\";\\nimport \\\"../../interfaces/ITokenAdapter.sol\\\";\\nimport {IllegalState} from \\\"../../base/Errors.sol\\\";\\nimport \\\"../../interfaces/external/bastion/ICErc20.sol\\\";\\n\\n/// @title  CTokenAdapter\\n/// @author Alchemix Finance\\ncontract CTokenAdapter is ITokenAdapter {\\n    string public constant override version = \\\"2.1.0\\\";\\n\\n    address public immutable override token;\\n    address public immutable override underlyingToken;\\n\\n    constructor(address _cToken, address _underlyingToken) {\\n        token = _cToken;\\n        underlyingToken = _underlyingToken;\\n    }\\n\\n    /// @inheritdoc ITokenAdapter\\n    function price() external view override returns (uint256) {\\n        return ICErc20(token).exchangeRateStored() / 10**10;\\n    }\\n\\n    /// @inheritdoc ITokenAdapter\\n    function wrap(uint256 amount, address recipient) external override returns (uint256) {\\n        TokenUtils.safeTransferFrom(underlyingToken, msg.sender, address(this), amount);\\n        TokenUtils.safeApprove(underlyingToken, token, amount);\\n        uint256 balanceBeforeMint = TokenUtils.safeBalanceOf(token, address(this));\\n        ICErc20(token).mint(amount);\\n        uint256 afterBeforeMint = TokenUtils.safeBalanceOf(token, address(this));\\n        uint256 mintedAmount = afterBeforeMint - balanceBeforeMint;\\n        TokenUtils.safeTransfer(token, recipient, mintedAmount);\\n        return mintedAmount;\\n    }\\n\\n    /// @inheritdoc ITokenAdapter\\n    function unwrap(uint256 amount, address recipient) external override returns (uint256) {\\n        TokenUtils.safeTransferFrom(token, msg.sender, address(this), amount);\\n\\n        uint256 cTokenBalanceBefore = TokenUtils.safeBalanceOf(token, address(this));\\n        uint256 underlyingTokenBalanceBefore = TokenUtils.safeBalanceOf(underlyingToken, address(this));\\n        ICErc20(token).redeem(amount);\\n        uint256 cTokenBalanceAfter = TokenUtils.safeBalanceOf(token, address(this));\\n        uint256 underlyingTokenBalanceAfter = TokenUtils.safeBalanceOf(underlyingToken, address(this));\\n\\n        // This is done to protect the system by ensuing that all the tokens are burn during withrawal\\n        if (cTokenBalanceBefore - cTokenBalanceAfter != amount) {\\n            revert IllegalState();\\n        }\\n\\n        uint256 recipientAmount = underlyingTokenBalanceAfter - underlyingTokenBalanceBefore;\\n        TokenUtils.safeTransfer(underlyingToken, recipient, recipientAmount);\\n\\n        return recipientAmount;\\n    }\\n}\",\"keccak256\":\"0xf78837887406acb9877cc63d83f60c84c0815e8cdcadeb75104accbbd4ab6ba8\"},\"contracts/base/Errors.sol\":{\"content\":\"pragma solidity ^0.8.11;\\n\\n/// @notice An error used to indicate that an action could not be completed because either the `msg.sender` or\\n///         `msg.origin` is not authorized.\\nerror Unauthorized();\\n\\n/// @notice An error used to indicate that an action could not be completed because the contract either already existed\\n///         or entered an illegal condition which is not recoverable from.\\nerror IllegalState();\\n\\n/// @notice An error used to indicate that an action could not be completed because of an illegal argument was passed\\n///         to the function.\\nerror IllegalArgument();\",\"keccak256\":\"0xfd0aef24fe5a6c5c65d3532dd67c99a8f6b450de3fa6cd6b38c542928105652a\"},\"contracts/interfaces/IERC20Burnable.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport \\\"./IERC20Minimal.sol\\\";\\n\\n/// @title  IERC20Burnable\\n/// @author Alchemix Finance\\ninterface IERC20Burnable is IERC20Minimal {\\n    /// @notice Burns `amount` tokens from the balance of `msg.sender`.\\n    ///\\n    /// @param amount The amount of tokens to burn.\\n    ///\\n    /// @return If burning the tokens was successful.\\n    function burn(uint256 amount) external returns (bool);\\n\\n    /// @notice Burns `amount` tokens from `owner`'s balance.\\n    ///\\n    /// @param owner  The address to burn tokens from.\\n    /// @param amount The amount of tokens to burn.\\n    ///\\n    /// @return If burning the tokens was successful.\\n    function burnFrom(address owner, uint256 amount) external returns (bool);\\n}\",\"keccak256\":\"0x262ab3be86a306ee107ffda823417341f86ea8fba5acdc79fd3d23f8b177354a\"},\"contracts/interfaces/IERC20Metadata.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\n/// @title  IERC20Metadata\\n/// @author Alchemix Finance\\ninterface IERC20Metadata {\\n    /// @notice Gets the name of the token.\\n    ///\\n    /// @return The name.\\n    function name() external view returns (string memory);\\n\\n    /// @notice Gets the symbol of the token.\\n    ///\\n    /// @return The symbol.\\n    function symbol() external view returns (string memory);\\n\\n    /// @notice Gets the number of decimals that the token has.\\n    ///\\n    /// @return The number of decimals.\\n    function decimals() external view returns (uint8);\\n}\",\"keccak256\":\"0x2d5429bdf25a43d40c7e23f3e27dd595585f33b1aaed4aabe8e76e681e15702b\"},\"contracts/interfaces/IERC20Minimal.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\n/// @title  IERC20Minimal\\n/// @author Alchemix Finance\\ninterface IERC20Minimal {\\n    /// @notice An event which is emitted when tokens are transferred between two parties.\\n    ///\\n    /// @param owner     The owner of the tokens from which the tokens were transferred.\\n    /// @param recipient The recipient of the tokens to which the tokens were transferred.\\n    /// @param amount    The amount of tokens which were transferred.\\n    event Transfer(address indexed owner, address indexed recipient, uint256 amount);\\n\\n    /// @notice An event which is emitted when an approval is made.\\n    ///\\n    /// @param owner   The address which made the approval.\\n    /// @param spender The address which is allowed to transfer tokens on behalf of `owner`.\\n    /// @param amount  The amount of tokens that `spender` is allowed to transfer.\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /// @notice Gets the current total supply of tokens.\\n    ///\\n    /// @return The total supply.\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice Gets the balance of tokens that an account holds.\\n    ///\\n    /// @param account The account address.\\n    ///\\n    /// @return The balance of the account.\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /// @notice Gets the allowance that an owner has allotted for a spender.\\n    ///\\n    /// @param owner   The owner address.\\n    /// @param spender The spender address.\\n    ///\\n    /// @return The number of tokens that `spender` is allowed to transfer on behalf of `owner`.\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /// @notice Transfers `amount` tokens from `msg.sender` to `recipient`.\\n    ///\\n    /// @notice Emits a {Transfer} event.\\n    ///\\n    /// @param recipient The address which will receive the tokens.\\n    /// @param amount    The amount of tokens to transfer.\\n    ///\\n    /// @return If the transfer was successful.\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /// @notice Approves `spender` to transfer `amount` tokens on behalf of `msg.sender`.\\n    ///\\n    /// @notice Emits a {Approval} event.\\n    ///\\n    /// @param spender The address which is allowed to transfer tokens on behalf of `msg.sender`.\\n    /// @param amount  The amount of tokens that `spender` is allowed to transfer.\\n    ///\\n    /// @return If the approval was successful.\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /// @notice Transfers `amount` tokens from `owner` to `recipient` using an approval that `owner` gave to `msg.sender`.\\n    ///\\n    /// @notice Emits a {Approval} event.\\n    /// @notice Emits a {Transfer} event.\\n    ///\\n    /// @param owner     The address to transfer tokens from.\\n    /// @param recipient The address that will receive the tokens.\\n    /// @param amount    The amount of tokens to transfer.\\n    ///\\n    /// @return If the transfer was successful.\\n    function transferFrom(address owner, address recipient, uint256 amount) external returns (bool);\\n}\",\"keccak256\":\"0x51fd0df2a5ad7f05d49b23a5672ea911d69b660d9653af87bb8ec7cdaf7780cb\"},\"contracts/interfaces/IERC20Mintable.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport \\\"./IERC20Minimal.sol\\\";\\n\\n/// @title  IERC20Mintable\\n/// @author Alchemix Finance\\ninterface IERC20Mintable is IERC20Minimal {\\n    /// @notice Mints `amount` tokens to `recipient`.\\n    ///\\n    /// @param recipient The address which will receive the minted tokens.\\n    /// @param amount    The amount of tokens to mint.\\n    ///\\n    /// @return If minting the tokens was successful.\\n    function mint(address recipient, uint256 amount) external returns (bool);\\n}\",\"keccak256\":\"0xba3abc2b29d6241f08d999b052cc200f202c89c897c87277692c05220cc6ee95\"},\"contracts/interfaces/ITokenAdapter.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\n/// @title  ITokenAdapter\\n/// @author Alchemix Finance\\ninterface ITokenAdapter {\\n    /// @notice Gets the current version.\\n    ///\\n    /// @return The version.\\n    function version() external view returns (string memory);\\n\\n    /// @notice Gets the address of the yield token that this adapter supports.\\n    ///\\n    /// @return The address of the yield token.\\n    function token() external view returns (address);\\n\\n    /// @notice Gets the address of the underlying token that the yield token wraps.\\n    ///\\n    /// @return The address of the underlying token.\\n    function underlyingToken() external view returns (address);\\n\\n    /// @notice Gets the number of underlying tokens that a single whole yield token is redeemable for.\\n    ///\\n    /// @return The price.\\n    function price() external view returns (uint256);\\n\\n    /// @notice Wraps `amount` underlying tokens into the yield token.\\n    ///\\n    /// @param amount           The amount of the underlying token to wrap.\\n    /// @param recipient        The address which will receive the yield tokens.\\n    ///\\n    /// @return amountYieldTokens The amount of yield tokens minted to `recipient`.\\n    function wrap(uint256 amount, address recipient)\\n        external\\n        returns (uint256 amountYieldTokens);\\n\\n    /// @notice Unwraps `amount` yield tokens into the underlying token.\\n    ///\\n    /// @param amount           The amount of yield-tokens to redeem.\\n    /// @param recipient        The recipient of the resulting underlying-tokens.\\n    ///\\n    /// @return amountUnderlyingTokens The amount of underlying tokens unwrapped to `recipient`.\\n    function unwrap(uint256 amount, address recipient)\\n        external\\n        returns (uint256 amountUnderlyingTokens);\\n}\",\"keccak256\":\"0xf29d317f46f9d393e366952933d06c7e8fc68c12d9359504c558741dd987b91e\"},\"contracts/interfaces/external/bastion/ICErc20.sol\":{\"content\":\"pragma solidity ^0.8.11;\\n\\ninterface ICErc20 {\\n    function mint(uint256) external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function supplyRatePerBlock() external returns (uint256);\\n\\n    function redeem(uint) external returns (uint);\\n\\n    function redeemUnderlying(uint) external returns (uint);\\n}\",\"keccak256\":\"0x4f2aba64aa6c9ed17cd7ce2393b50a85929580a1121f4735b49a55353d74875b\"},\"contracts/libraries/TokenUtils.sol\":{\"content\":\"pragma solidity ^0.8.11;\\n\\nimport \\\"../interfaces/IERC20Burnable.sol\\\";\\nimport \\\"../interfaces/IERC20Metadata.sol\\\";\\nimport \\\"../interfaces/IERC20Minimal.sol\\\";\\nimport \\\"../interfaces/IERC20Mintable.sol\\\";\\n\\n/// @title  TokenUtils\\n/// @author Alchemix Finance\\nlibrary TokenUtils {\\n    /// @notice An error used to indicate that a call to an ERC20 contract failed.\\n    ///\\n    /// @param target  The target address.\\n    /// @param success If the call to the token was a success.\\n    /// @param data    The resulting data from the call. This is error data when the call was not a success. Otherwise,\\n    ///                this is malformed data when the call was a success.\\n    error ERC20CallFailed(address target, bool success, bytes data);\\n\\n    /// @dev A safe function to get the decimals of an ERC20 token.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the query fails or returns an unexpected value.\\n    ///\\n    /// @param token The target token.\\n    ///\\n    /// @return The amount of decimals of the token.\\n    function expectDecimals(address token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = token.staticcall(\\n            abi.encodeWithSelector(IERC20Metadata.decimals.selector)\\n        );\\n\\n        if (!success || data.length < 32) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n\\n        return abi.decode(data, (uint8));\\n    }\\n\\n    /// @dev Gets the balance of tokens held by an account.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the query fails or returns an unexpected value.\\n    ///\\n    /// @param token   The token to check the balance of.\\n    /// @param account The address of the token holder.\\n    ///\\n    /// @return The balance of the tokens held by an account.\\n    function safeBalanceOf(address token, address account) internal view returns (uint256) {\\n        (bool success, bytes memory data) = token.staticcall(\\n            abi.encodeWithSelector(IERC20Minimal.balanceOf.selector, account)\\n        );\\n\\n        if (!success || data.length < 32) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n\\n        return abi.decode(data, (uint256));\\n    }\\n\\n    /// @dev Transfers tokens to another address.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the transfer failed or returns an unexpected value.\\n    ///\\n    /// @param token     The token to transfer.\\n    /// @param recipient The address of the recipient.\\n    /// @param amount    The amount of tokens to transfer.\\n    function safeTransfer(address token, address recipient, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20Minimal.transfer.selector, recipient, amount)\\n        );\\n\\n        if (!success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Approves tokens for the smart contract.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the approval fails or returns an unexpected value.\\n    ///\\n    /// @param token   The token to approve.\\n    /// @param spender The contract to spend the tokens.\\n    /// @param value   The amount of tokens to approve.\\n    function safeApprove(address token, address spender, uint256 value) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20Minimal.approve.selector, spender, value)\\n        );\\n\\n        if (!success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Transfer tokens from one address to another address.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the transfer fails or returns an unexpected value.\\n    ///\\n    /// @param token     The token to transfer.\\n    /// @param owner     The address of the owner.\\n    /// @param recipient The address of the recipient.\\n    /// @param amount    The amount of tokens to transfer.\\n    function safeTransferFrom(address token, address owner, address recipient, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20Minimal.transferFrom.selector, owner, recipient, amount)\\n        );\\n\\n        if (!success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Mints tokens to an address.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the mint fails or returns an unexpected value.\\n    ///\\n    /// @param token     The token to mint.\\n    /// @param recipient The address of the recipient.\\n    /// @param amount    The amount of tokens to mint.\\n    function safeMint(address token, address recipient, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20Mintable.mint.selector, recipient, amount)\\n        );\\n\\n        if (!success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Burns tokens.\\n    ///\\n    /// Reverts with a `CallFailed` error if execution of the burn fails or returns an unexpected value.\\n    ///\\n    /// @param token  The token to burn.\\n    /// @param amount The amount of tokens to burn.\\n    function safeBurn(address token, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20Burnable.burn.selector, amount)\\n        );\\n\\n        if (!success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n\\n    /// @dev Burns tokens from its total supply.\\n    ///\\n    /// @dev Reverts with a {CallFailed} error if execution of the burn fails or returns an unexpected value.\\n    ///\\n    /// @param token  The token to burn.\\n    /// @param owner  The owner of the tokens.\\n    /// @param amount The amount of tokens to burn.\\n    function safeBurnFrom(address token, address owner, uint256 amount) internal {\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(IERC20Burnable.burnFrom.selector, owner, amount)\\n        );\\n\\n        if (!success || (data.length != 0 && !abi.decode(data, (bool)))) {\\n            revert ERC20CallFailed(token, success, data);\\n        }\\n    }\\n}\",\"keccak256\":\"0x8c2deb72f89b365058a2ca22965f11e035a73bfcd0c3937c9a5c87c0617fcebf\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051610b59380380610b5983398101604081905261002f91610062565b6001600160a01b039182166080521660a052610095565b80516001600160a01b038116811461005d57600080fd5b919050565b6000806040838503121561007557600080fd5b61007e83610046565b915061008c60208401610046565b90509250929050565b60805160a051610a376101226000396000818160920152818161014601528181610172015281816103460152818161042f015261049201526000818161011d01528181610193015281816101bf015281816101fd0152818161027a015281816102b4015281816102ea01528181610318015281816103840152818161040101526104cd0152610a376000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806313bac820146100675780632495a5991461008d57806354fd4d50146100cc5780637647691d146100fd578063a035b1fe14610110578063fc0c546a14610118575b600080fd5b61007a610075366004610885565b61013f565b6040519081526020015b60405180910390f35b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610084565b6100f0604051806040016040528060058152602001640322e312e360dc1b81525081565b604051610084919061091d565b61007a61010b366004610885565b6102e3565b61007a6104c3565b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b600061016d7f000000000000000000000000000000000000000000000000000000000000000033308661055c565b6101b87f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000085610665565b60006101e47f00000000000000000000000000000000000000000000000000000000000000003061076d565b60405163140e25ad60e31b8152600481018690529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a0712d68906024016020604051808303816000875af115801561024e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102729190610937565b50600061029f7f00000000000000000000000000000000000000000000000000000000000000003061076d565b905060006102ad8383610950565b90506102da7f00000000000000000000000000000000000000000000000000000000000000008683610852565b95945050505050565b60006103117f000000000000000000000000000000000000000000000000000000000000000033308661055c565b600061033d7f00000000000000000000000000000000000000000000000000000000000000003061076d565b9050600061036b7f00000000000000000000000000000000000000000000000000000000000000003061076d565b60405163db006a7560e01b8152600481018790529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063db006a75906024016020604051808303816000875af11580156103d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f99190610937565b5060006104267f00000000000000000000000000000000000000000000000000000000000000003061076d565b905060006104547f00000000000000000000000000000000000000000000000000000000000000003061076d565b9050866104618386610950565b1461047f57604051634a613c4160e01b815260040160405180910390fd5b600061048b8483610950565b90506104b87f00000000000000000000000000000000000000000000000000000000000000008883610852565b979650505050505050565b60006402540be4007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610529573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054d9190610937565b6105579190610975565b905090565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291516000928392908816916105c09190610997565b6000604051808303816000865af19150503d80600081146105fd576040519150601f19603f3d011682016040523d82523d6000602084013e610602565b606091505b5091509150811580610630575080511580159061063057508080602001905181019061062e91906109b3565b155b1561065d5785828260405163e7e40b5b60e01b8152600401610654939291906109d5565b60405180910390fd5b505050505050565b6040516001600160a01b03838116602483015260448201839052600091829186169063095ea7b360e01b906064015b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516106d29190610997565b6000604051808303816000865af19150503d806000811461070f576040519150601f19603f3d011682016040523d82523d6000602084013e610714565b606091505b5091509150811580610742575080511580159061074257508080602001905181019061074091906109b3565b155b156107665784828260405163e7e40b5b60e01b8152600401610654939291906109d5565b5050505050565b604080516001600160a01b0383811660248084019190915283518084039091018152604490920183526020820180516001600160e01b03166370a0823160e01b179052915160009283928392918716916107c79190610997565b600060405180830381855afa9150503d8060008114610802576040519150601f19603f3d011682016040523d82523d6000602084013e610807565b606091505b509150915081158061081a575060208151105b1561083e5784828260405163e7e40b5b60e01b8152600401610654939291906109d5565b808060200190518101906102da9190610937565b6040516001600160a01b03838116602483015260448201839052600091829186169063a9059cbb60e01b90606401610694565b6000806040838503121561089857600080fd5b8235915060208301356001600160a01b03811681146108b657600080fd5b809150509250929050565b60005b838110156108dc5781810151838201526020016108c4565b838111156108eb576000848401525b50505050565b600081518084526109098160208601602086016108c1565b601f01601f19169290920160200192915050565b60208152600061093060208301846108f1565b9392505050565b60006020828403121561094957600080fd5b5051919050565b60008282101561097057634e487b7160e01b600052601160045260246000fd5b500390565b60008261099257634e487b7160e01b600052601260045260246000fd5b500490565b600082516109a98184602087016108c1565b9190910192915050565b6000602082840312156109c557600080fd5b8151801515811461093057600080fd5b6001600160a01b038416815282151560208201526060604082018190526000906102da908301846108f156fea2646970667358221220da65fb21a2dded4318cb10081e989334d885fd07b78aa6d1d818686b85c9785964736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c806313bac820146100675780632495a5991461008d57806354fd4d50146100cc5780637647691d146100fd578063a035b1fe14610110578063fc0c546a14610118575b600080fd5b61007a610075366004610885565b61013f565b6040519081526020015b60405180910390f35b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610084565b6100f0604051806040016040528060058152602001640322e312e360dc1b81525081565b604051610084919061091d565b61007a61010b366004610885565b6102e3565b61007a6104c3565b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b600061016d7f000000000000000000000000000000000000000000000000000000000000000033308661055c565b6101b87f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000085610665565b60006101e47f00000000000000000000000000000000000000000000000000000000000000003061076d565b60405163140e25ad60e31b8152600481018690529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a0712d68906024016020604051808303816000875af115801561024e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102729190610937565b50600061029f7f00000000000000000000000000000000000000000000000000000000000000003061076d565b905060006102ad8383610950565b90506102da7f00000000000000000000000000000000000000000000000000000000000000008683610852565b95945050505050565b60006103117f000000000000000000000000000000000000000000000000000000000000000033308661055c565b600061033d7f00000000000000000000000000000000000000000000000000000000000000003061076d565b9050600061036b7f00000000000000000000000000000000000000000000000000000000000000003061076d565b60405163db006a7560e01b8152600481018790529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063db006a75906024016020604051808303816000875af11580156103d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f99190610937565b5060006104267f00000000000000000000000000000000000000000000000000000000000000003061076d565b905060006104547f00000000000000000000000000000000000000000000000000000000000000003061076d565b9050866104618386610950565b1461047f57604051634a613c4160e01b815260040160405180910390fd5b600061048b8483610950565b90506104b87f00000000000000000000000000000000000000000000000000000000000000008883610852565b979650505050505050565b60006402540be4007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610529573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054d9190610937565b6105579190610975565b905090565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b17905291516000928392908816916105c09190610997565b6000604051808303816000865af19150503d80600081146105fd576040519150601f19603f3d011682016040523d82523d6000602084013e610602565b606091505b5091509150811580610630575080511580159061063057508080602001905181019061062e91906109b3565b155b1561065d5785828260405163e7e40b5b60e01b8152600401610654939291906109d5565b60405180910390fd5b505050505050565b6040516001600160a01b03838116602483015260448201839052600091829186169063095ea7b360e01b906064015b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516106d29190610997565b6000604051808303816000865af19150503d806000811461070f576040519150601f19603f3d011682016040523d82523d6000602084013e610714565b606091505b5091509150811580610742575080511580159061074257508080602001905181019061074091906109b3565b155b156107665784828260405163e7e40b5b60e01b8152600401610654939291906109d5565b5050505050565b604080516001600160a01b0383811660248084019190915283518084039091018152604490920183526020820180516001600160e01b03166370a0823160e01b179052915160009283928392918716916107c79190610997565b600060405180830381855afa9150503d8060008114610802576040519150601f19603f3d011682016040523d82523d6000602084013e610807565b606091505b509150915081158061081a575060208151105b1561083e5784828260405163e7e40b5b60e01b8152600401610654939291906109d5565b808060200190518101906102da9190610937565b6040516001600160a01b03838116602483015260448201839052600091829186169063a9059cbb60e01b90606401610694565b6000806040838503121561089857600080fd5b8235915060208301356001600160a01b03811681146108b657600080fd5b809150509250929050565b60005b838110156108dc5781810151838201526020016108c4565b838111156108eb576000848401525b50505050565b600081518084526109098160208601602086016108c1565b601f01601f19169290920160200192915050565b60208152600061093060208301846108f1565b9392505050565b60006020828403121561094957600080fd5b5051919050565b60008282101561097057634e487b7160e01b600052601160045260246000fd5b500390565b60008261099257634e487b7160e01b600052601260045260246000fd5b500490565b600082516109a98184602087016108c1565b9190910192915050565b6000602082840312156109c557600080fd5b8151801515811461093057600080fd5b6001600160a01b038416815282151560208201526060604082018190526000906102da908301846108f156fea2646970667358221220da65fb21a2dded4318cb10081e989334d885fd07b78aa6d1d818686b85c9785964736f6c634300080b0033",
  "devdoc": {
    "author": "Alchemix Finance",
    "errors": {
      "ERC20CallFailed(address,bool,bytes)": [
        {
          "params": {
            "data": "The resulting data from the call. This is error data when the call was not a success. Otherwise,                this is malformed data when the call was a success.",
            "success": "If the call to the token was a success.",
            "target": "The target address."
          }
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "price()": {
        "returns": {
          "_0": "The price."
        }
      },
      "unwrap(uint256,address)": {
        "params": {
          "amount": "The amount of yield-tokens to redeem.",
          "recipient": "The recipient of the resulting underlying-tokens."
        },
        "returns": {
          "_0": "The amount of underlying tokens unwrapped to `recipient`."
        }
      },
      "wrap(uint256,address)": {
        "params": {
          "amount": "The amount of the underlying token to wrap.",
          "recipient": "The address which will receive the yield tokens."
        },
        "returns": {
          "_0": "The amount of yield tokens minted to `recipient`."
        }
      }
    },
    "stateVariables": {
      "token": {
        "return": "The address of the yield token.",
        "returns": {
          "_0": "The address of the yield token."
        }
      },
      "underlyingToken": {
        "return": "The address of the underlying token.",
        "returns": {
          "_0": "The address of the underlying token."
        }
      },
      "version": {
        "return": "The version.",
        "returns": {
          "_0": "The version."
        }
      }
    },
    "title": "CTokenAdapter",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ERC20CallFailed(address,bool,bytes)": [
        {
          "notice": "An error used to indicate that a call to an ERC20 contract failed."
        }
      ],
      "IllegalState()": [
        {
          "notice": "An error used to indicate that an action could not be completed because the contract either already existed         or entered an illegal condition which is not recoverable from."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "price()": {
        "notice": "Gets the number of underlying tokens that a single whole yield token is redeemable for."
      },
      "token()": {
        "notice": "Gets the address of the yield token that this adapter supports."
      },
      "underlyingToken()": {
        "notice": "Gets the address of the underlying token that the yield token wraps."
      },
      "unwrap(uint256,address)": {
        "notice": "Unwraps `amount` yield tokens into the underlying token."
      },
      "version()": {
        "notice": "Gets the current version."
      },
      "wrap(uint256,address)": {
        "notice": "Wraps `amount` underlying tokens into the yield token."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}